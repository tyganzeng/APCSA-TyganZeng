//© A+ Computer Science  -  www.apluscompsci.com
//Name -
//Date -
//Class -
//Lab  -

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Canvas;
import java.awt.event.ActionEvent;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import static java.lang.Character.*;
import java.awt.image.BufferedImage;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class OuterSpace extends Canvas implements KeyListener, Runnable
{
	private Ship ship;
	private Alien alienOne;
	private Alien alienTwo;
	private ArrayList<Ammo> shots;
	private ArrayList<Ammo> trishotLeft;
	private ArrayList<Ammo> trishotRight;
	private ArrayList<Powerup> powerups;
	//private ArrayList<Alien> aliens;
	Aliens alienList;
	private boolean stunned = false;
	private boolean trishot = false;

	private boolean[] keys;
	private BufferedImage back;
	private int bulletTimer;
	private int alienTimer;
	private int stunnedTimer;
	public OuterSpace()
	{
		setBackground(Color.black);

		keys = new boolean[5];

		stunnedTimer = 0;
		bulletTimer = 0;
		alienTimer = 0;
		//instantiate other stuff
		ship = new Ship();
		alienOne = new Alien(100,100,1);
		alienTwo = new Alien(200,100,1);
		shots = new ArrayList<Ammo>();
		trishotLeft = new ArrayList<Ammo>();
		trishotRight = new ArrayList<Ammo>();
		powerups = new ArrayList<Powerup>();
		alienList = new Aliens(10);
		//alienList.add(alienOne);
		//alienList.add(alienTwo);
		
		
		this.addKeyListener(this);
		new Thread(this).start();

		setVisible(true);
	}

   public void update(Graphics window)
   {
	   paint(window);
   }

	public void paint( Graphics window )
	{
		//set up the double buffering to make the game animation nice and smooth
		Graphics2D twoDGraph = (Graphics2D)window;

		//take a snap shop of the current screen and same it as an image
		//that is the exact same width and height as the current screen
		if(back==null)
		   back = (BufferedImage)(createImage(getWidth(),getHeight()));

		//create a graphics reference to the back ground image
		//we will draw all changes on the background image
		Graphics graphToBack = back.createGraphics();

		graphToBack.setColor(Color.BLUE);
		graphToBack.drawString("StarFighter ", 25, 50 );
		graphToBack.setColor(Color.BLACK);
		graphToBack.fillRect(0,0,800,600);
		ship.draw(graphToBack);


		bulletTimer++;
		alienTimer++;
		
		if(keys[0] == true)
		{
			if(ship.getX() > 0){
				ship.move("LEFT");
			}
		}
		if(keys[1] == true)
		{
			if(ship.getX() < 700){
				ship.move("RIGHT");
			}
		}
		if(keys[2] == true)
		{
			if(ship.getY() > 0){
				ship.move("UP");
			}
		}
		if(keys[3] == true)
		{
			if(ship.getY() < 450){
				ship.move("DOWN");
			}
		}
		//add code to move stuff
		if(keys[4] == true){
			if(bulletTimer > ship.getAttackSpeed()){
				Ammo x = new Ammo(ship.getX()+33, ship.getY());
				shots.add(x);
				if(trishot == true){
					Ammo y = new Ammo(ship.getX()+33, ship.getY());
					Ammo z = new Ammo(ship.getX()+33, ship.getY());
					trishotLeft.add(y);
					trishotRight.add(z);
				}
				
				bulletTimer = 0;
				
				
				
			}
		}
		
		alienList.move(alienTimer);
		if(alienTimer > 800){
			alienTimer = 0;
		}
	
		alienList.draw(graphToBack);
		
		for(Ammo x : shots){
			x.move("UP");
			x.draw(graphToBack);
			alienList.checkCollision(shots,powerups);
		}
		
		for (Ammo y : trishotLeft){
			y.move("LEFTDIAGONAL");
			y.draw(graphToBack);
			alienList.checkCollision(trishotLeft,powerups);
			
		}
		
		for (Ammo z : trishotRight){
			z.move("RIGHTDIAGONAL");
			z.draw(graphToBack);
			alienList.checkCollision(trishotRight,powerups);
			
		}
		
		
		
		
		for(Powerup p : powerups){
			if(Math.abs(ship.getX() + 30 - (p.getX())) < 50 && Math.abs(ship.getY() + 35 - (p.getY())) < 50){	
				powerups.remove(p);
				if(p.getType() == "ATTACKSPEED"){
					ship.setAttackSpeed(ship.getAttackSpeed()/10);
				} else if(p.getType() == "STUN"){
					stunned = true;
				} else if(p.getType() == "TRISHOT"){
					trishot = true;
				}
			}
		}
		if(stunned == true){
			alienList.slow();
			stunnedTimer++;
			alienTimer--;
			System.out.println(stunnedTimer);
			if(stunnedTimer > 500){
				alienList.speedUp();
				stunnedTimer = 0;
				stunned = false;
			}
			
		}
		
		for(Powerup y : powerups){
			y.move("DOWN");
			y.draw(graphToBack);
		}
		

		

		twoDGraph.drawImage(back, null, 0, 0);
	}


	public void keyPressed(KeyEvent e)
	{
		if (e.getKeyCode() == KeyEvent.VK_LEFT)
		{
			keys[0] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_RIGHT)
		{
			keys[1] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_UP)
		{
			keys[2] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_DOWN)
		{
			keys[3] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_SPACE)
		{
			keys[4] = true;
		}
		repaint();
	}

	public void keyReleased(KeyEvent e)
	{
		if (e.getKeyCode() == KeyEvent.VK_LEFT)
		{
			keys[0] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_RIGHT)
		{
			keys[1] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_UP)
		{
			keys[2] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_DOWN)
		{
			keys[3] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_SPACE)
		{
			keys[4] = false;
		}
		repaint();
	}

	public void keyTyped(KeyEvent e)
	{

	}

   public void run()
   {
   	try
   	{
   		while(true)
   		{
   		   Thread.currentThread().sleep(5);
            repaint();
         }
      }catch(Exception e)
      {
      }
  	}
}

